// <auto-generated />
using System;
using Blog.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blog.Entity.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f5347f8-910f-4d83-a6f5-dc6984fe4e79"),
                            Author = "Mertcan Alkan",
                            CategoryId = new Guid("b78b5ef8-714b-4c4d-93aa-f7c09863cf9b"),
                            Content = "Merhababaaaababababababa",
                            CreatedDate = new DateTime(2023, 10, 19, 17, 18, 34, 869, DateTimeKind.Local).AddTicks(8818),
                            ImageId = new Guid("5a6b603d-c15a-4508-ae7c-49f82ea5e8b0"),
                            Title = "Deneme",
                            ViewCount = 1
                        },
                        new
                        {
                            Id = new Guid("bf804af6-19de-4a3d-a2d8-04c9655ab856"),
                            Author = "Mertcan Alkan",
                            CategoryId = new Guid("31e1cb79-1160-47e3-ace7-33afcacb763e"),
                            Content = "LoremLoremloremmmmmmmmmm",
                            CreatedDate = new DateTime(2023, 10, 19, 17, 18, 34, 869, DateTimeKind.Local).AddTicks(8854),
                            ImageId = new Guid("8a7b7e4b-956b-4907-9945-b6864f6b3ccb"),
                            Title = "Deneme2",
                            ViewCount = 1
                        });
                });

            modelBuilder.Entity("Blog.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b78b5ef8-714b-4c4d-93aa-f7c09863cf9b"),
                            CreatedDate = new DateTime(2023, 10, 19, 17, 18, 34, 869, DateTimeKind.Local).AddTicks(9177),
                            Name = "ASP.Net Core"
                        },
                        new
                        {
                            Id = new Guid("31e1cb79-1160-47e3-ace7-33afcacb763e"),
                            CreatedDate = new DateTime(2023, 10, 19, 17, 18, 34, 869, DateTimeKind.Local).AddTicks(9182),
                            Name = "Dünya"
                        });
                });

            modelBuilder.Entity("Blog.Entity.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a6b603d-c15a-4508-ae7c-49f82ea5e8b0"),
                            CreatedDate = new DateTime(2023, 10, 19, 17, 18, 34, 869, DateTimeKind.Local).AddTicks(9364),
                            FileName = "Deneme",
                            FileType = "jpg"
                        },
                        new
                        {
                            Id = new Guid("8a7b7e4b-956b-4907-9945-b6864f6b3ccb"),
                            CreatedDate = new DateTime(2023, 10, 19, 17, 18, 34, 869, DateTimeKind.Local).AddTicks(9367),
                            FileName = "Deneme2",
                            FileType = "png"
                        });
                });

            modelBuilder.Entity("Blog.Entity.Entities.Article", b =>
                {
                    b.HasOne("Blog.Entity.Entities.Category", "Category")
                        .WithMany("Article")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entity.Entities.Image", "Image")
                        .WithMany("Article")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Blog.Entity.Entities.Category", b =>
                {
                    b.Navigation("Article");
                });

            modelBuilder.Entity("Blog.Entity.Entities.Image", b =>
                {
                    b.Navigation("Article");
                });
#pragma warning restore 612, 618
        }
    }
}
